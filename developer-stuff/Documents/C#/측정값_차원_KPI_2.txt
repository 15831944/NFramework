측정값에 대한 어느정도의 설명은 Part 1에서 설명했구요.

이번에는 측정 방식에 대해서 알아봅시다.

측정값은 측정시기와 방식에 따라 전혀 다른 값을 가질 수 있습니다. 
크게 두가지 측정 방식이 있습니다.

1. 측정 시기마다 매번 전체 정보 (FACT) 를 가지고 측정값을 산출합니다.
2. 기 측정한 정보는 무시하고, 새롭게 추가된 정보(FACT)만을 측정하여, 측정값을 산출합니다.

위 두가지 측정 방식은 FACT 정보의 생성 => DW 로의 ETL 작업 시 매우 다른 방식으로 작업을 수행합니다.
쉽게 얘기해서 
1번 방식은 매번 전체 정보를 가지고, 측정값을 재계산하는 것이고
2번 방식은 한번 벌어진 일은 수정될 수 없는 사실로 계속해서 기록해가는 것입니다.

예를 들어 BPM 의 특정 Task가 시간에 따라 다음과 같은 상태의 변화가 생길 수 있습니다. 
이 변화는 일반적으로 Feedback, 회수, 반려 시에 생길 수 있습니다.

생성->준비->실행(1)->완료(1)->실행(2)->완료(2)

위의 상태에서 몇가지 측정값을 가져와 보겠습니다.

1번 측정 방식이라면 
    완료(1) 단계에서는 실행건수 0, 완료건수가 1일 것입니다.
    실행(2) 단계에서는 실행건수 1, 완료건수 0 일 것입니다.
    완료(2) 단계에서는 실행건수 0, 완료건수 1일 것입니다.

2번 측정 방식이라면
    완료(1) 단계에서는 실행건수 1, 완료건수 1  (벌써 실행되었다는 로그형태의 값이 있다.)
    실행(2) 단계에서는 실행건수 2, 완료건수 1
    완료(2) 단계에서는 실행건수 2, 완료건수 2

자 두가지 방식 중 옳은 것은 무엇입니까?


그건 뭘 측정하냐에 따라 방식이 달라지므로, 둘 다 옳은 방식이라고 말할 수 있습니다.

현 상태 즉 현재 Active인 Task 수, 완료된 Task의 수를 측정하기 위해서는 1번 방식을 사용합니다. 
사실 이 방식은 OLTP에서 집계함수를 이용하는 방식과 같습니다. 즉 현재 DB의 정보를 사진 찍듯이 볼 수 있는 것입니다.

예를 든 BPM Task 수행 현황이라면 1번 측정방식이 올바른 측정값이 될 수 있습니다.


2번 방식은 현재 상태뿐 아니라, 모든 변화된 사실을 누적해서 보겠다는 것입니다. 
정보 분석시에 유용한 방식이고, DW, OLAP을 사용하는 가장 큰 이유가 되겠습니다.

예를 든 BPM Task 수행이라면, 투입 자원, 프로세스 효율, 프로세스 CycleTime, Task Working Time 등은 2번 방식으로 측정해야 올바른 측정값이 될 것입니다.

 

제가 2006년도에 했던 방식은 거의 모두 1번 방식입니다. (이걸 통계/현황이라 지칭했고, 분석이 아니라고들 했지요...)
2번 측정 방식을 적용하지 못하는 한계도 있었습니다만 
1번 방식이 단순 통계/현황이고, OLTP에서 얻을 수 있는 집계 함수만으로 모두 가능한 것만 있던 것도 아니었습니다.

즉 2006년도 SL 방식은 애초에 의도한 대로, 
  1. 측정값 추출
  2. 다차원 분석 (단순 집계가 아닌 다양한 Dimension 연결)
  3. 2번 측정 방식을 위한 방안 마련
을 충실히 수행했습니다.

물론 제가 손을 놓은 후에 3번 같은 경우는 잊혀졌지요...

현재 PPMS팀에 문의한 결과, 모든 경우를 1번과 같이 수행하고 있다고 하던군요. 
2번 측정 방식에 대해 질문한 결과 - 제 질문이 난해했는지 - 답변이 시원치 않았습니다. 
알고는 있는데... 어떻게 해야할지 방법을 모르는 것인지... 그 방법까지는 알고 있는데 실행에 옮길 수 없었던 건지...

결론적으로 
이번 BPM Suite 측정값에 대해 다차원 분석을 위한 DW 구성 작업 중 2번 방식으로 측정해야 할 측정값을 
PPMS팀 단독으로는 절대 해결 못합니다.

왜냐하면... 2번 측정 방식이라는게 결국 FACT 를 발생시키는 쪽에서 누적되는 정보를 제공해야 하기 때문입니다.

예를 들면 예전에는 TASK의 위임 기능은 OLTP에 맞게, 현재 작업자를 교체하는 방식이었지만, 
TASK 별 위임횟수, 사용자별 위임횟수 등을 측정하기 위해서는 TASK의 위임된 사실(FACT)를 따로 로그 형식으로 저장해두고, 
이를 DW 쪽에 제공해야만 측정이 가능합니다.

즉 2번 측정 방식에 해당하는 것은 상태의 변화, 사건의 발생 등이 세세하게 기록되어지는 Fact data를 제공해야지만, 
올바른 측정값을 계산할 수 있고, 추후 더 다양한 분석 및 추이가 계산될 수 있습니다.

2번 방식의 또 하나의 어려움 점은 측정 주기입니다.

OLTP에서 항상 누적된 정보를 보관하고 있다는 것은 시스템에 부하를 주는 것이므로, 
가장 좋은 방법은 DW로 정보 제공 후, 제공된 정보는 삭제하는 것입니다.

이는 무수히 많은 측정 값에 대해 측정 주기가 상이하다면, DW 쪽에서 ETL 작업 시에 각 측정값별로 주기를 달리해야만 하는 어려움이 있습니다.


2번 방식의 측정값 수집시에는 크게 두가지 방식으로 Fact 정보를 이관할 수 있습니다.

  1. OLTP 에서 발생한 정보를 주기적으로 파일 등으로 옮긴 후 FACT 데이타를 삭제하는 것입니다. 이때 파일은 ETL이 FACT 정보를 DW로 보내고, 삭제하면 됩니다.
      EAI 쪽에서도 FTP 파일, 메일, Messaging 등을 사용하는 방식을 사용합니다. 송신자가 수신자에게 Message형태로 보내고, 끝내는 단방향 전송이라는 것이지요.
   
  2. ETL 작업이 OLTP DB와 DW DB 모두를 제어할 수 있다면
  
      2.1 ETL 작업시에 OLTP DB로부터 읽어온 Fact data는 DW에 적재시키고, OLTP DB에서 삭제 또는 Flag를 "읽음", "삭제가능" 으로 표시해둔다.
        OLTP는 주기적으로 Fact data에서 ETL이 읽어간 정보는 삭제한다.
     이 때 ETL은 한번 읽은 것은 다시 읽지 않도록 해야 한다. (OLTP의 정보가 변경되더라도 한 번 가져간 정보는 변경되지 않는다.)
     
   2.2 최종 ETL 작업 시간을 기준으로 새롭게 발생한 Fact 정보만을 가져온다. OLTP는 Fact 발생시각과 ETL작업 시각을 비교하여 삭제한다.
  

이제 어느정도 측정값에 대해서는 아시리라 믿고,

앞으로 해야 할 일은

1. 제품별 측정값 조사
2. 측정값의 선별 (필요성 - 기술적/업무적)  / KPI 로 선정 여부
3. 선정된 측정값에 대한 측정방식 선택 및 그에 따른 FACT Data 구성 
4. ETL 작업 구현
5. DW 구현
6. OLAP 구현 (Cube 구성, Measurements 정의 , Dimension 정의)
7. KPI 제공을 위한 API 구현 
8. 각 제품에서 KPI를 표현할 UI 구성

등이 남아 있네요...  


 
