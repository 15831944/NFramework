<?xml version="1.0" encoding="utf-8"?>

<configuration>

	<!-- Castle.Windsor Component configuration -->
	<components>

		<!-- NHibernate 용 Generic Repository : NHRepository{TEntit} 를 생성한다. lifestyle=Singleton|Thread|Transient-->
		<component id="nhibernate.repository"
		           service="NSoft.NFramework.Data.NHibernateEx.INHRepository`1, NSoft.NFramework.Data.NHibernateEx"
		           type="NSoft.NFramework.Data.NHibernateEx.NHRepository`1, NSoft.NFramework.Data.NHibernateEx">
			<interceptors>
				<interceptor>${NSoft.NFramework.PerformanceInterceptor}</interceptor>
			</interceptors>
		</component>

		<!-- 
			NOTE: NHibernate Entity의 상태 및 Lifecycle 를 추적할 수 있는 Interceptor 
			NOTE: 이것이 없으면 Entity의 IsSaved, IsTransient가 오동작을 합니다. 
			NOTE: 아예 내부코드에서 자동으로 등록하도록 했으므로, 정의를 안해도 자동으로 등록됩니다!!!
		-->
		<component id="EntityStateInterceptor"
				   service="NHibernate.IInterceptor, NHibernate"
                   type="NSoft.NFramework.Data.NHibernateEx.Interceptors.EntityStateInterceptor, NSoft.NFramework.Data.NHibernateEx"/>

		<!-- 
			NOTE: NHibernate Entity에 INotifyPropertyChanged 인터페이스를 제공하도록 하는 Proxy로 변형하는 Interceptor입니다. 
			NOTE: WPF 등에서 사용할 때만 사용하세요. (괜히 Proxy 더 만들어서 성능에 좋을 건 없지요^^)
		-->
		<component id="NotifyPropertyChangedInterceptor"
				   service="NHibernate.IInterceptor, NHibernate"
				   type="NSoft.NFramework.Data.NHibernateEx.Interceptors.EditablePropertyChangedInterceptor, NSoft.NFramework.Data.NHibernateEx"/>
		
		
		<!-- UnitOfWork 사용을 위한 Factory -->
		<component id="nhibernate.unit-of-work.factory"
		           service="NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkFactory, NSoft.NFramework.Data.NHibernateEx"
		           type="NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkFactory, NSoft.NFramework.Data.NHibernateEx">
		</component>

		<!-- UnitOfWork 사용을 위한 Factory -->
		<component id="nhibernate.unit-of-work.factory.fluent"
		           service="NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkFactory, NSoft.NFramework.Data.NHibernateEx"
		           type="NSoft.NFramework.Data.NHibernateEx.FluentNHUnitOfWorkFactory, NSoft.NFramework.Data.NHibernateEx">
            <parameters>
                <assemblies>
                    <array>
                        <item>NSoft.NFramework.Data.NHibernateEx.Domain</item>
                    </array>
                </assemblies>
            </parameters>
		</component>


		<!-- 
			Castle DynamicProxy를 이용해서 Performance를 검사하는 Interceptor 
			NOTE: 운영 시에는 필요없습니다.
		-->
		<component id="NSoft.NFramework.PerformanceInterceptor"
		           service="Castle.DynamicProxy.IInterceptor, Castle.Core"
		           type="NSoft.NFramework.Data.NHibernateEx.PerformanceInterceptor, NSoft.NFramework.Data.NHibernateEx.Tests" />
	</components>

</configuration>