<?xml version="1.0" encoding="utf-8"?>

<configuration>

	<properties>
		<defaultDatabaseName>NSoft</defaultDatabaseName>
	</properties>

	<!-- Castle.Windsor Component configuration -->
	<components>

		<component id="DefaultAdoRepository"
				   service="NSoft.NFramework.Data.IAdoRepository, NSoft.NFramework.Data"
				   type="NSoft.NFramework.Data.AdoRepositoryImpl, NSoft.NFramework.Data">
			<parameters>
				<!-- dbName을 설정하지 않으면 DAAB의 기본 DB 사용 -->
				<!--<dbName>#{defaultDatabaseName}</dbName>-->
				<QueryProvider>${IniAdoQueryProvider.RealWeb}</QueryProvider>
			</parameters>
		</component>

		<component id="OracleRepository.Default"
				   service="NSoft.NFramework.Data.DevartOracle.IOracleRepository, NSoft.NFramework.Data.DevartOracle"
				   type="NSoft.NFramework.Data.DevartOracle.OracleRepositoryImpl, NSoft.NFramework.Data.DevartOracle"
				   lifestyle="singleton">
			<parameters>
				<!-- dbName을 설정하지 않으면 DAAB의 기본 DB 사용 -->
				<!--<dbName>#{defaultDatabaseName}</dbName>-->
				<QueryProvider>${IniAdoQueryProvider.RealWeb}</QueryProvider>
			</parameters>
		</component>

		<component id="OracleRepository.NSoft"
				   service="NSoft.NFramework.Data.DevartOracle.IOracleRepository, NSoft.NFramework.Data.DevartOracle"
				   type="NSoft.NFramework.Data.DevartOracle.OracleRepositoryImpl, NSoft.NFramework.Data.DevartOracle"
				   lifestyle="singleton">
			<parameters>
				<!-- dbName을 설정하지 않으면 DAAB의 기본 DB 사용 -->
				<!--<dbName>#{defaultDatabaseName}</dbName>-->
				<QueryProvider>${IniAdoQueryProvider.RealWeb}</QueryProvider>
			</parameters>
		</component>

		<component id="IniAdoQueryProvider.RealWeb"
		           service="NSoft.NFramework.Data.IIniQueryProvider, NSoft.NFramework.Data"
		           type="NSoft.NFramework.Data.QueryProviders.IniAdoQueryProvider, NSoft.NFramework.Data">
			<parameters>
				<queryFilePath>.\QueryFiles\RealWeb.ado.oracle.ini</queryFilePath>
			</parameters>
		</component>

		<!-- 
				Fluent ADO.NET : 컬럼명과 속성명에 대한 매핑을 수행하는 Component : 
				NameMappingUtil 에서 사용한다. AdoTool.ConvertAll<T>(), IAdoRepository.ExecuteReader<T>, IAdoRepository.ExecuteEntity에서 사용한다.
		-->
		<component id="Ado.PropertyNameMapper"
		           service="NSoft.NFramework.Data.Mappers.INameMapper, NSoft.NFramework.Data"
		           type="NSoft.NFramework.Data.Mappers.CapitalizeNameMapper, NSoft.NFramework.Data" />



		<!-- NHibernate 용 Generic Repository : NHRepository{TEntit} 를 생성한다. lifestyle=singleton|transient-->
		<component id="nhibernate.repository"
		           service="NSoft.NFramework.Data.NHibernateEx.INHRepository`1, NSoft.NFramework.Data.NHibernateEx"
		           type="NSoft.NFramework.Data.NHibernateEx.NHRepository`1, NSoft.NFramework.Data.NHibernateEx">
		</component>

		<!-- UnitOfWork 사용을 위한 Factory -->
		<component id="nhibernate.unit-of-work.factory"
		           service="NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkFactory, NSoft.NFramework.Data.NHibernateEx"
		           type="NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkFactory, NSoft.NFramework.Data.NHibernateEx">
			<parameters>
				<cfgFileName>hibernate.cfg.xml</cfgFileName>
			</parameters>
		</component>

	</components>

</configuration>